def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY')
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    ndkVersion '27.2.12479018'
    compileSdkVersion 34
    defaultConfig {
        if (buildAsApplication) {
            applicationId "com.dishii.mm"
        }
        minSdkVersion 21
        //noinspection OldTargetApi
        targetSdkVersion 34
        versionCode 4
        versionName "1.1.1"
        externalNativeBuild {
            cmake {
                 arguments "-DANDROID_APPNAME=${applicationId}", "-DANDROID_APP_PLATFORM=android-21", "-DANDROID_STL=c++_static", "-DHAVE_LD_VERSION_SCRIPT=OFF", "-DUSE_OPENGLES=ON"
                 abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    buildFeatures {
        buildConfig = true
    }
    namespace 'com.dishii.mm'
    lint {
        abortOnError false
    }
    applicationVariants.configureEach { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            cmake {
                 path '../../CMakeLists.txt'
                 version "3.31.5"
            }
        }
       
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "com.dishii.mm.aar"
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.core:core:1.13.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
}

tasks.register('wrapper', Wrapper) {
    gradleVersion = '8.10.2'
}

tasks.register('prepareKotlinBuildScriptModel') {
}
